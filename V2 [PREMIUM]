local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local mouse = LocalPlayer:GetMouse()

local aimLock = false
local targetPlayer = nil

-- UI button for mobile players
local lockButton = Instance.new("TextButton")
lockButton.Size = UDim2.new(0, 200, 0, 50)
lockButton.Position = UDim2.new(0.5, -100, 0.9, 0)
lockButton.Text = "Lock Target"
lockButton.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Toggle aim lock with 'V' key or mobile button
local function toggleAimLock()
    aimLock = not aimLock
    if aimLock then
        -- Lock on the closest target
        targetPlayer = findClosestTarget()
    else
        targetPlayer = nil
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.V then
        toggleAimLock()
    end
end)

lockButton.MouseButton1Click:Connect(toggleAimLock)

-- Find the closest target
function findClosestTarget()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local distance = (character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Update aim towards the target
RunService.RenderStepped:Connect(function()
    if aimLock and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        local aimDirection = (targetPosition - LocalPlayer.Character.HumanoidRootPart.Position).unit
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position, targetPosition)
    end
end)

-- Predict the target's position based on ping and FPS
function predictPosition(player)
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local fps = workspace:GetRealPhysicsFPS()
    local pingTime = tonumber(ping:match("%d+")) / 1000
    local prediction = player.Character.HumanoidRootPart.Velocity * pingTime

    return player.Character.HumanoidRootPart.Position + prediction
end

-- Ensure precise calculations and velocity resolving
function preciseCalculation()
    if aimLock and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local predictedPosition = predictPosition(targetPlayer)
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position, predictedPosition)
    end
end

RunService.RenderStepped:Connect(preciseCalculation)
